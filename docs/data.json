{
  "name": "ai-helpers",
  "owner": "openshift-eng",
  "plugins": [
    {
      "name": "git",
      "description": "Git Plugin",
      "version": "0.0.1",
      "commands": [
        {
          "name": "branch-cleanup",
          "description": "Clean up old and defunct branches that are no longer needed",
          "synopsis": "/git:branch-cleanup [--dry-run] [--merged-only] [--remote]",
          "argument_hint": "[--dry-run] [--merged-only] [--remote]"
        },
        {
          "name": "cherry-pick-by-patch",
          "description": "Cherry-pick git commit into current branch by \"patch\" command",
          "synopsis": "/git:cherry-pick-by-patch commit_hash",
          "argument_hint": "<commit_hash>"
        },
        {
          "name": "commit-suggest",
          "description": "Generate Conventional Commits style commit messages or summarize existing commits",
          "synopsis": "/git:commit-suggest       # Analyze staged changes",
          "argument_hint": "[N]"
        },
        {
          "name": "debt-scan",
          "description": "Analyze technical debt indicators in the repository",
          "synopsis": "/git:debt-scan",
          "argument_hint": ""
        },
        {
          "name": "suggest-reviewers",
          "description": "Suggest appropriate reviewers for a PR based on git blame and OWNERS files",
          "synopsis": "/git:suggest-reviewers [base-branch]",
          "argument_hint": "[base-branch]"
        },
        {
          "name": "summary",
          "description": "Show current branch, git status, and recent commits for quick context",
          "synopsis": "/git:summary",
          "argument_hint": ""
        }
      ],
      "skills": [
        {
          "name": "Suggest Reviewers Helper",
          "id": "suggest-reviewers",
          "description": "Git blame analysis helper for the suggest-reviewers command"
        }
      ],
      "has_readme": true
    },
    {
      "name": "hello-world",
      "description": "Hello World Plugin",
      "version": "1.0.0",
      "commands": [
        {
          "name": "echo",
          "description": "Hello world plugin implementation",
          "synopsis": "/hello-world:echo [name]",
          "argument_hint": "[name]"
        }
      ],
      "skills": [],
      "has_readme": true
    },
    {
      "name": "jira",
      "description": "A plugin to automate tasks with Jira",
      "version": "0.0.1",
      "commands": [
        {
          "name": "create",
          "description": "Create Jira issues (story, epic, feature, task, bug) with proper formatting",
          "synopsis": "/jira:create <type> [project-key] <summary> [options]",
          "argument_hint": "<type> [project-key] <summary> [--component <name>] [--version <version>] [--parent <key>]"
        },
        {
          "name": "generate-test-plan",
          "description": "Generate test steps for a JIRA issue",
          "synopsis": "",
          "argument_hint": "[JIRA issue key] [GitHub PR URLs]"
        },
        {
          "name": "grooming",
          "description": "Analyze new bugs and cards added over a time period and generate grooming meeting agenda",
          "synopsis": "/jira:grooming [project-filter] [time-period] [--component component-name] [--label label-name]",
          "argument_hint": "[project-filter] [time-period] [--component component-name] [--label label-name]"
        },
        {
          "name": "solve",
          "description": "Analyze a JIRA issue and create a pull request to solve it.",
          "synopsis": "/jira:solve <jira-issue-id> [remote]",
          "argument_hint": ""
        },
        {
          "name": "status-rollup",
          "description": "Generate a status rollup comment for any JIRA issue based on all child issues and a given date range",
          "synopsis": "/jira:status-rollup issue-id [--start-date YYYY-MM-DD] [--end-date YYYY-MM-DD]",
          "argument_hint": "issue-id [--start-date YYYY-MM-DD] [--end-date YYYY-MM-DD]"
        }
      ],
      "skills": [
        {
          "name": "CNTRLPLANE Jira Conventions",
          "id": "cntrlplane",
          "description": "Jira conventions for the CNTRLPLANE project used by OpenShift teams"
        },
        {
          "name": "Create Jira Bug",
          "id": "create-bug",
          "description": "Implementation guide for creating well-formed Jira bug reports"
        },
        {
          "name": "Create Jira Epic",
          "id": "create-epic",
          "description": "Implementation guide for creating Jira epics with proper scope and parent linking"
        },
        {
          "name": "Create Jira Feature",
          "id": "create-feature",
          "description": "Implementation guide for creating Jira features representing strategic objectives and market problems"
        },
        {
          "name": "Create Jira Story",
          "id": "create-story",
          "description": "Implementation guide for creating well-formed Jira user stories with acceptance criteria"
        },
        {
          "name": "Create Jira Task",
          "id": "create-task",
          "description": "Implementation guide for creating Jira tasks for technical and operational work"
        },
        {
          "name": "HyperShift Jira Conventions",
          "id": "hypershift",
          "description": "HyperShift team-specific Jira requirements for component selection and conventions"
        },
        {
          "name": "OCPBUGS Jira Conventions",
          "id": "ocpbugs",
          "description": "Jira conventions and bug templates for the OCPBUGS project"
        }
      ],
      "has_readme": true
    },
    {
      "name": "ci",
      "description": "A plugin to work with OpenShift CI",
      "version": "0.0.1",
      "commands": [
        {
          "name": "ask-sippy",
          "description": "Ask the Sippy AI agent questions about OpenShift CI payloads, jobs, and test results",
          "synopsis": "/ask-sippy [question]",
          "argument_hint": "[question]"
        },
        {
          "name": "query-job-status",
          "description": "Query the status of a gangway job execution by ID",
          "synopsis": "/query-job-status <execution-id>",
          "argument_hint": "<execution-id>"
        },
        {
          "name": "trigger-periodic",
          "description": "Trigger a periodic gangway job with optional environment variable overrides",
          "synopsis": "/trigger-periodic <job-name> [ENV_VAR=value ...]",
          "argument_hint": "<job-name> [ENV_VAR=value ...]"
        },
        {
          "name": "trigger-postsubmit",
          "description": "Trigger a postsubmit gangway job with repository refs",
          "synopsis": "/trigger-postsubmit <job-name> <org> <repo> <base-ref> <base-sha> [ENV_VAR=value ...]",
          "argument_hint": "<job-name> <org> <repo> <base-ref> <base-sha> [ENV_VAR=value ...]"
        },
        {
          "name": "trigger-presubmit",
          "description": "Trigger a presubmit gangway job (typically use GitHub Prow commands instead)",
          "synopsis": "/trigger-presubmit <job-name> <org> <repo> <base-ref> <base-sha> <pr-number> <pr-sha> [ENV_VAR=value ...]",
          "argument_hint": "<job-name> <org> <repo> <base-ref> <base-sha> <pr-number> <pr-sha> [ENV_VAR=value ...]"
        }
      ],
      "skills": [
        {
          "name": "OC Authentication Helper",
          "id": "oc-auth",
          "description": "Helper skill to retrieve OAuth tokens from the correct OpenShift cluster context when multiple clusters are configured"
        }
      ],
      "has_readme": true
    },
    {
      "name": "component-health",
      "description": "Analyze component health and track regressions across OpenShift releases",
      "version": "0.0.1",
      "commands": [
        {
          "name": "analyze-regressions",
          "description": "Grade component health based on regression triage metrics for an OpenShift release",
          "synopsis": "/component-health:analyze-regressions <release> [--components comp1 comp2 ...]",
          "argument_hint": "<release> [--components comp1 comp2 ...]"
        }
      ],
      "skills": [
        {
          "name": "Analyze Regressions",
          "id": "analyze-regressions",
          "description": "Grade component health based on regression triage metrics for OpenShift releases"
        },
        {
          "name": "Get Release Dates",
          "id": "get-release-dates",
          "description": "Fetch OpenShift release dates and metadata from Sippy API"
        },
        {
          "name": "List Regressions",
          "id": "list-regressions",
          "description": "Fetch and analyze component health regressions for OpenShift releases"
        }
      ],
      "has_readme": true
    },
    {
      "name": "doc",
      "description": "A plugin for engineering documentation and notes",
      "version": "0.0.1",
      "commands": [
        {
          "name": "note",
          "description": "Generate professional engineering notes and append them to a log file",
          "synopsis": "/doc:note [task description]",
          "argument_hint": "[task description]"
        }
      ],
      "skills": [],
      "has_readme": true
    },
    {
      "name": "session",
      "description": "A plugin for Claude session management and persistence",
      "version": "0.0.1",
      "commands": [
        {
          "name": "save-session",
          "description": "Save current conversation session to markdown file for future continuation",
          "synopsis": "/save-session",
          "argument_hint": "[optional-description]"
        }
      ],
      "skills": [],
      "has_readme": true
    },
    {
      "name": "sosreport",
      "description": "Analyze sosreport archives for system diagnostics and troubleshooting",
      "version": "0.0.1",
      "commands": [
        {
          "name": "analyze",
          "description": "Analyze sosreport archive for system diagnostics and issues",
          "synopsis": "/sosreport:analyze <path-to-sosreport> [--only <areas>] [--skip <areas>]",
          "argument_hint": "<path-to-sosreport> [--only <areas>] [--skip <areas>]"
        }
      ],
      "skills": [
        {
          "name": "Logs Analysis",
          "id": "logs-analysis",
          "description": "Analyze system and application log data from sosreport archives, extracting error patterns, kernel panics, OOM events, service failures, and application crashes from journald logs and traditional log files within the sosreport directory structure to identify root causes of system failures and issues"
        },
        {
          "name": "Network Analysis",
          "id": "network-analysis",
          "description": "Analyze network configuration data from sosreport archives, extracting interface configurations, routing tables, active connections, firewall rules (firewalld/iptables), and DNS settings from the sosreport directory structure to diagnose network connectivity and configuration issues"
        },
        {
          "name": "Resource Analysis",
          "id": "resource-analysis",
          "description": "Analyze system resource usage data from sosreport archives, extracting memory statistics, CPU load averages, disk space utilization, and process information from the sosreport directory structure to diagnose resource exhaustion, performance bottlenecks, and capacity issues"
        },
        {
          "name": "System Configuration Analysis",
          "id": "system-config-analysis",
          "description": "Analyze system configuration data from sosreport archives, extracting OS details, installed packages, systemd service status, SELinux/AppArmor policies, and kernel parameters from the sosreport directory structure to diagnose configuration-related system issues"
        }
      ],
      "has_readme": true
    },
    {
      "name": "utils",
      "description": "A generic utilities plugin serving as a catch-all for various helper commands",
      "version": "0.0.1",
      "commands": [
        {
          "name": "address-reviews",
          "description": "Fetch and address all PR review comments",
          "synopsis": "",
          "argument_hint": "[PR number (optional - uses current branch if omitted)]"
        },
        {
          "name": "generate-test-plan",
          "description": "Generate test steps for one or more related PRs",
          "synopsis": "",
          "argument_hint": "[GitHub PR URLs]"
        },
        {
          "name": "placeholder",
          "description": "Placeholder command for the utils plugin",
          "synopsis": "/utils:placeholder",
          "argument_hint": ""
        },
        {
          "name": "process-renovate-pr",
          "description": "Process Renovate dependency PR(s) to meet repository contribution standards",
          "synopsis": "/utils:process-renovate-pr <PR_NUMBER|open> [JIRA_PROJECT] [COMPONENT]",
          "argument_hint": "<PR_NUMBER|open> [JIRA_PROJECT] [COMPONENT]"
        }
      ],
      "skills": [],
      "has_readme": true
    },
    {
      "name": "olm",
      "description": "OLM (Operator Lifecycle Manager) plugin for operator management and debugging",
      "version": "0.1.0",
      "commands": [
        {
          "name": "approve",
          "description": "Approve pending InstallPlans for operator installations and upgrades",
          "synopsis": "/olm:approve <operator-name> [namespace] [--all]",
          "argument_hint": "<operator-name> [namespace] [--all]"
        },
        {
          "name": "catalog",
          "description": "Manage catalog sources for discovering and installing operators",
          "synopsis": "/olm:catalog list",
          "argument_hint": "<list|add|remove|refresh|status> [arguments]"
        },
        {
          "name": "debug",
          "description": "Debug OLM issues using must-gather logs and source code analysis",
          "synopsis": "/olm:debug <issue-description> <must-gather-path> [olm-version]",
          "argument_hint": "<issue-description> <must-gather-path> [olm-version]"
        },
        {
          "name": "diagnose",
          "description": "Diagnose and optionally fix common OLM and operator issues",
          "synopsis": "/olm:diagnose [operator-name] [namespace] [--fix] [--cluster]",
          "argument_hint": "[operator-name] [namespace] [--fix] [--cluster]"
        },
        {
          "name": "install",
          "description": "Install a day-2 operator using Operator Lifecycle Manager",
          "synopsis": "/olm:install <operator-name> [namespace] [channel] [source] [--approval=Automatic|Manual]",
          "argument_hint": "<operator-name> [namespace] [channel] [source] [--approval=Automatic|Manual]"
        },
        {
          "name": "list",
          "description": "List installed operators in the cluster",
          "synopsis": "/olm:list [namespace] [--all-namespaces]",
          "argument_hint": "[namespace] [--all-namespaces]"
        },
        {
          "name": "search",
          "description": "Search for available operators in catalog sources",
          "synopsis": "/olm:search [query] [--catalog <catalog-name>]",
          "argument_hint": "[query] [--catalog <catalog-name>]"
        },
        {
          "name": "status",
          "description": "Get detailed status and health information for an operator",
          "synopsis": "/olm:status <operator-name> [namespace]",
          "argument_hint": "<operator-name> [namespace]"
        },
        {
          "name": "uninstall",
          "description": "Uninstall a day-2 operator and optionally remove its resources",
          "synopsis": "/olm:uninstall <operator-name> [namespace] [--remove-crds] [--remove-namespace]",
          "argument_hint": "<operator-name> [namespace] [--remove-crds] [--remove-namespace]"
        },
        {
          "name": "upgrade",
          "description": "Update an operator to the latest version or switch channels",
          "synopsis": "/olm:upgrade <operator-name> [namespace] [--channel=<channel>] [--approve]",
          "argument_hint": "<operator-name> [namespace] [--channel=<channel>] [--approve]"
        }
      ],
      "skills": [],
      "has_readme": true
    },
    {
      "name": "prow-job",
      "description": "A plugin to analyze and inspect Prow CI job results",
      "version": "0.0.1",
      "commands": [
        {
          "name": "analyze-install-failure",
          "description": "Analyze OpenShift installation failures in Prow CI jobs",
          "synopsis": "/prow-job:analyze-install-failure <prowjob-url>",
          "argument_hint": "<prowjob-url>"
        },
        {
          "name": "analyze-resource",
          "description": "Analyze Kubernetes resource lifecycle in Prow job artifacts",
          "synopsis": "",
          "argument_hint": "prowjob-url resource-name"
        },
        {
          "name": "analyze-test-failure",
          "description": "Analyzes test errors from console logs and Prow CI job artifacts",
          "synopsis": "",
          "argument_hint": "prowjob-url test-name"
        },
        {
          "name": "extract-must-gather",
          "description": "Extract and decompress must-gather archives from Prow job artifacts",
          "synopsis": "/prow-job:extract-must-gather <prowjob-url>",
          "argument_hint": "prowjob-url"
        }
      ],
      "skills": [
        {
          "name": "Prow Job Analyze Install Failure",
          "id": "prow-job-analyze-install-failure",
          "description": "Analyze OpenShift installation failures in Prow CI jobs by examining installer logs, log bundles, and sosreports. Use when CI job fails \"install should succeed\" tests at bootstrap, cluster creation or other stages."
        },
        {
          "name": "Prow Job Analyze Metal Install Failure",
          "id": "prow-job-analyze-metal-install-failure",
          "description": "Analyze OpenShift bare metal installation failures in Prow CI jobs using dev-scripts artifacts. Use for jobs with \"metal\" in name, for debugging Metal3/Ironic provisioning, installation, or dev-scripts setup failures. You may also use the prow-job-analyze-install-failure skill with this one."
        },
        {
          "name": "Prow Job Analyze Resource",
          "id": "prow-job-analyze-resource",
          "description": "Analyze Kubernetes resource lifecycle in Prow CI job artifacts by parsing audit logs and pod logs from GCS, generating interactive HTML reports with timelines"
        },
        {
          "name": "Prow Job Analyze Test Failure",
          "id": "prow-job-analyze-test-failure",
          "description": "Analyze a failed test by inspecting the code in the current project and artifacts in Prow CI job. Provide a detailed analysis of the test failure in a pre-defined format."
        },
        {
          "name": "Prow Job Extract Must-Gather",
          "id": "prow-job-extract-must-gather",
          "description": "Extract and decompress must-gather archives from Prow CI job artifacts, generating an interactive HTML file browser with filters"
        }
      ],
      "has_readme": true
    },
    {
      "name": "agendas",
      "description": "A plugin to create various meeting agendas",
      "version": "0.0.1",
      "commands": [
        {
          "name": "outcome-refinement",
          "description": "Analyze the list of JIRA outcome issues to prepare an outcome refinement meeting agenda.",
          "synopsis": "/agendas:outcome-refinement",
          "argument_hint": ""
        }
      ],
      "skills": [],
      "has_readme": true
    },
    {
      "name": "openshift",
      "description": "OpenShift development utilities and helpers",
      "version": "0.0.1",
      "commands": [
        {
          "name": "bump-deps",
          "description": "Bump dependencies in OpenShift projects with automated analysis and PR creation",
          "synopsis": "/openshift:bump-deps <dependency> [version] [--create-jira] [--create-pr]",
          "argument_hint": "<dependency> [version] [--create-jira] [--create-pr]"
        },
        {
          "name": "create-cluster",
          "description": "Extract OpenShift installer from release image and create an OCP cluster",
          "synopsis": "/openshift:create-cluster [release-image] [platform] [options]",
          "argument_hint": "\"[release-image] [platform] [options]\""
        },
        {
          "name": "destroy-cluster",
          "description": "Destroy an OpenShift cluster created by create-cluster command",
          "synopsis": "/openshift:destroy-cluster [install-dir]",
          "argument_hint": "\"[install-dir]\""
        },
        {
          "name": "new-e2e-test",
          "description": "Write and validate new OpenShift E2E tests using Ginkgo framework",
          "synopsis": "/new-e2e-test [test-specification]",
          "argument_hint": "[test-specification]"
        },
        {
          "name": "rebase",
          "description": "Rebase OpenShift fork of an upstream repository to a new upstream release.",
          "synopsis": "/openshift:rebase [tag]",
          "argument_hint": "<tag>"
        }
      ],
      "skills": [],
      "has_readme": true
    },
    {
      "name": "yaml",
      "description": "YAML documentation and utilities",
      "version": "0.0.1",
      "commands": [
        {
          "name": "docs",
          "description": "Generate comprehensive YAML documentation from Go struct definitions with sensible default values",
          "synopsis": "/yaml:docs [file:StructName] [output.md]",
          "argument_hint": "[file:StructName] [output.md]"
        }
      ],
      "skills": [],
      "has_readme": true
    },
    {
      "name": "must-gather",
      "description": "A plugin to analyze and report on must-gather data",
      "version": "0.0.1",
      "commands": [
        {
          "name": "analyze",
          "description": "Quick analysis of must-gather data - runs all analysis scripts and provides comprehensive cluster diagnostics",
          "synopsis": "/must-gather:analyze [must-gather-path] [component]",
          "argument_hint": "[must-gather-path] [component]"
        }
      ],
      "skills": [
        {
          "name": "Must-Gather Analyzer",
          "id": "must-gather-analyzer",
          "description": "|"
        }
      ],
      "has_readme": true
    },
    {
      "name": "hcp",
      "description": "Generate HyperShift cluster creation commands via hcp CLI from natural language descriptions",
      "version": "0.0.1",
      "commands": [
        {
          "name": "generate",
          "description": "Generate ready-to-execute hypershift cluster creation commands from natural language descriptions",
          "synopsis": "/hcp:generate <provider> <cluster-description>",
          "argument_hint": "<provider> <cluster-description>"
        }
      ],
      "skills": [
        {
          "name": "HyperShift Agent Provider",
          "id": "hcp-create-agent",
          "description": "Use this skill when you need to deploy HyperShift clusters on bare metal, edge environments, or disconnected infrastructures using pre-provisioned agents"
        },
        {
          "name": "HyperShift AWS Provider",
          "id": "hcp-create-aws",
          "description": "Use this skill when you need to deploy HyperShift clusters on AWS infrastructure with proper STS credentials, IAM roles, and VPC configuration"
        },
        {
          "name": "HyperShift Azure Provider",
          "id": "hcp-create-azure",
          "description": "Use this skill when you need to deploy HyperShift clusters on Microsoft Azure with proper identity configuration and resource management"
        },
        {
          "name": "HyperShift KubeVirt Provider",
          "id": "hcp-create-kubevirt",
          "description": "Use this skill when you need to deploy HyperShift clusters on existing Kubernetes clusters using KubeVirt virtualization"
        },
        {
          "name": "HyperShift OpenStack Provider",
          "id": "hcp-create-openstack",
          "description": "Use this skill when you need to deploy HyperShift clusters on OpenStack infrastructure with proper flavor selection and network configuration"
        },
        {
          "name": "HyperShift PowerVS Provider",
          "id": "hcp-create-powervs",
          "description": "Use this skill when you need to deploy HyperShift clusters on IBM Cloud PowerVS with proper processor configuration and resource management"
        }
      ],
      "has_readme": true
    }
  ]
}